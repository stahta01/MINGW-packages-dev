From 6df9d9e986ee50d26b4da5089029924f8920bc81 Mon Sep 17 00:00:00 2001
From: Tim Stahlhut <stahta01@gmail.com>
Date: Sun, 5 Apr 2020 08:40:17 -0400
Subject: stc: Replace wxString Length() with length()

Per docs wxString::Length() is a wxWidgets 1.xx compatibility function;
you should not use it in new code.
---
 src/stc/PlatWX.cpp | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/src/stc/PlatWX.cpp b/src/stc/PlatWX.cpp
index 359b5c4383..9744b2fd1b 100644
--- a/src/stc/PlatWX.cpp
+++ b/src/stc/PlatWX.cpp
@@ -773,7 +773,7 @@ SurfaceFontDataD2D::SurfaceFontDataD2D(const FontParameters& fp)
             m_pTextFormat->SetWordWrapping(DWRITE_WORD_WRAPPING_NO_WRAP);
 
             hr = pDWriteFactory->CreateTextLayout(extentTest.wc_str(),
-                extentTest.Length(), m_pTextFormat, FLT_MAX, FLT_MAX,
+                extentTest.length(), m_pTextFormat, FLT_MAX, FLT_MAX,
                 &pTextLayout);
         }
 
@@ -797,7 +797,7 @@ SurfaceFontDataD2D::SurfaceFontDataD2D(const FontParameters& fp)
             m_ascent = lineMetrics[0].baseline;
             m_descent = lineMetrics[0].height - lineMetrics[0].baseline;
             m_internalLeading = lineMetrics[0].height - emHeight;
-            m_averageCharWidth = textmetrics.width/extentTest.Length();
+            m_averageCharWidth = textmetrics.width/extentTest.length();
 
             switch ( fp.extraFontFlag & wxSTC_EFF_QUALITY_MASK )
             {
@@ -1539,7 +1539,7 @@ XYPOSITION SurfaceD2D::WidthText(Font &font_, const char *s, int len)
         DWRITE_TEXT_METRICS textMetrics = {0,0,0,0,0,0,0,0,0};
 
         HRESULT hr = m_pDWriteFactory->CreateTextLayout(tbuf.wc_str(),
-            tbuf.Length(), m_pTextFormat, FLT_MAX, FLT_MAX, &pTextLayout);
+            tbuf.length(), m_pTextFormat, FLT_MAX, FLT_MAX, &pTextLayout);
 
         if ( SUCCEEDED(hr) )
         {
@@ -1560,10 +1560,10 @@ void SurfaceD2D::MeasureWidths(Font &font_, const char *s, int len,
     int fit = 0;
     wxString tbuf = stc2wx(s,len);
     wxVector<FLOAT> poses;
-    poses.reserve(tbuf.Length());
-    poses.resize(tbuf.Length());
+    poses.reserve(tbuf.length());
+    poses.resize(tbuf.length());
 
-    fit = tbuf.Length();
+    fit = tbuf.length();
     const int clusters = 1000;
     DWRITE_CLUSTER_METRICS clusterMetrics[clusters];
     UINT32 count = 0;
@@ -1574,7 +1574,7 @@ void SurfaceD2D::MeasureWidths(Font &font_, const char *s, int len,
         wxCOMPtr<IDWriteTextLayout> pTextLayout;
 
         HRESULT hr = m_pDWriteFactory->CreateTextLayout(tbuf.wc_str(),
-            tbuf.Length(), m_pTextFormat, FLT_MAX, FLT_MAX, &pTextLayout);
+            tbuf.length(), m_pTextFormat, FLT_MAX, FLT_MAX, &pTextLayout);
         if ( !SUCCEEDED(hr) )
             return;
 
@@ -1597,7 +1597,7 @@ void SurfaceD2D::MeasureWidths(Font &font_, const char *s, int len,
             }
             position += clusterMetrics[ci].width;
         }
-        PLATFORM_ASSERT(ti == tbuf.Length());
+        PLATFORM_ASSERT(ti == tbuf.length());
     }
     if (m_unicodeMode)
     {
@@ -1642,7 +1642,7 @@ void SurfaceD2D::MeasureWidths(Font &font_, const char *s, int len,
     {
         const size_t buflen = static_cast<size_t>(len);
         // One character per position
-        PLATFORM_ASSERT(buflen == tbuf.Length());
+        PLATFORM_ASSERT(buflen == tbuf.length());
         for ( size_t kk=0; kk<buflen; kk++ )
         {
             positions[kk] = poses[kk];
@@ -1827,7 +1827,7 @@ void SurfaceD2D::DrawTextCommon(PRectangle rc, Font &font_, XYPOSITION ybase,
                 D2D1_ANTIALIAS_MODE_ALIASED);
         }
 
-        hr = m_pDWriteFactory->CreateTextLayout(tbuf.wc_str(), tbuf.Length(),
+        hr = m_pDWriteFactory->CreateTextLayout(tbuf.wc_str(), tbuf.length(),
             m_pTextFormat, rc.Width(), rc.Height(), &pTextLayout);
 
         if ( SUCCEEDED(hr) )
-- 
2.26.0.windows.1

